@page "/tasks/pending"
@using TaskMaster.Data.Model
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject TaskMaster.Data.Model.TaskMasterContext DbContext
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudContainer MaxWidth="MaxWidth.Large" Class="page-container">
    <!-- Header Section -->
    <MudText Typo="Typo.h4" Align="Align.Center" Class="header-title">Pending Tasks</MudText>
    <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="header-subtitle">
        Review all your pending tasks.
    </MudText>

    <!-- Task List Section -->
    <MudGrid GutterSize="GutterSize.Medium">
        @if (CompletedTasks == null || !CompletedTasks.Any())
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Align="Align.Center">No pending tasks found.</MudText>
            </MudItem>
        }
        else
        {
            @foreach (var task in CompletedTasks)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="task-card" Elevation="3">
                        <MudCardHeader>
                            <MudAvatar Color="Color.Primary" Variant="Variant.Filled" Size="Size.Medium" Class="task-icon">
                                <MudIcon Icon="@Icons.Material.Filled.Task" />
                            </MudAvatar>
                            <MudText Typo="Typo.h6" Class="task-title">@task.TaskTitle</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2" Class="task-description">@task.TaskDescription</MudText>
                            <MudDivider Class="date-divider" />
                            <div class="task-dates">
                                <MudIcon Icon="@Icons.Material.Filled.Event" Class="icon-dates" />
                                <span class="date-text">
                                    <strong>Start:</strong> @(task.StartDate == null ? "Not Set" : task.StartDate.Value.ToString("g"))
                                </span>
                                <span class="date-text">
                                    <strong>End:</strong> @(task.EndDate == null ? "Not Set" : task.EndDate.Value.ToString("g"))
                                </span>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>

    <!-- Floating Action Button -->
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="NavigateToAllTasks" Class="fab">
        Back to All Tasks
    </MudFab>
</MudContainer>

<style>
    .page-container {
        padding: 24px;
        position: relative;
    }

    .header-title {
        font-weight: bold;
        color: #4a4a4a;
        margin-bottom: 16px;
    }

    .header-subtitle {
        font-size: 1rem;
        color: #888888;
        margin-bottom: 24px;
    }

    .task-card {
        border-radius: 12px;
        margin-bottom: 16px;
        padding: 16px;
        transition: box-shadow 0.2s ease-in-out;
    }

        .task-card:hover {
            box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
        }

    .task-title {
        font-weight: 600;
        color: #2c3e50;
        margin-left: 8px;
    }

    .task-icon {
        margin-right: 8px;
        cursor: pointer;
    }

    .task-description {
        font-size: 0.9rem;
        color: #7f8c8d;
        margin-bottom: 8px;
    }

    .date-divider {
        margin: 8px 0;
    }

    .task-dates {
        display: flex;
        justify-content: space-between;
        font-size: 0.85rem;
        color: #95a5a6;
        padding: 8px;
        background-color: #f9f9f9;
        border-radius: 8px;
        margin-top: 8px;
    }

    .icon-dates {
        color: #e67e22;
        margin-right: 8px;
    }

    .date-text {
        margin-left: 4px;
    }

    .task-actions {
        display: flex;
        justify-content: space-around;
        padding-top: 8px;
    }

    .fab {
        position: fixed;
        bottom: 24px;
        right: 24px;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);
    }
</style>

@code {
    private List<Activity> CompletedTasks = new();

    protected override async Task OnInitializedAsync()
    {
        int? userId = await LocalStorage.GetItemAsync<int?>("userId");

        if (userId.HasValue)
        {
            CompletedTasks = await DbContext.Activities
                .Where(a => a.UserId == userId.Value && a.Completed==false)
                .ToListAsync();
        }
        else
        {
            Snackbar.Add("User not logged in. Redirecting to login page.", Severity.Warning);
            NavigationManager.NavigateTo("/login");
        }
    }

    private void NavigateToAllTasks()
    {
        NavigationManager.NavigateTo("/tasks");
    }
}
