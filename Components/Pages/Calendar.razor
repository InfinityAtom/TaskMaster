@page "/calendar"
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using TaskMaster.Data.Model
@inject TaskMaster.Data.Model.TaskMasterContext DbContext
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="calendar-container">
    <!-- Page Title -->
    <MudText Typo="Typo.h4" Align="Align.Center" Class="calendar-title">
        Task Calendar
    </MudText>
    <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="calendar-subtitle">
        View your tasks by date.
    </MudText>

    <div class="calendar-wrapper">
        <MudDatePicker T="DateTime?" @bind-Date="@SelectedDate"
                       PickerVariant="PickerVariant.Static"
                       StartOfWeek="DayOfWeek.Monday"
                       Class="date-picker"
                       AdditionalDateClassesFunc="CheckDate" />
    </div>

    <!-- Task List for Selected Date -->
    <MudText Typo="Typo.h6" Align="Align.Left" Class="task-list-title">
        Tasks for @SelectedDate?.ToString("MMMM dd, yyyy")
    </MudText>

    <MudGrid GutterSize="GutterSize.Medium">
        @if (AllTasks.Any(t => t.StartDate.HasValue && t.StartDate.Value.Date == SelectedDate.Value.Date))
        {
            @foreach (var task in TasksForSelectedDate)
            {
                @if (task.StartDate.HasValue && task.StartDate.Value.Date == SelectedDate.Value.Date)
                {

                    <MudItem xs="12" sm="12" md="6" lg="4">
                        <MudCard Class="task-card" Elevation="3">
                            <MudCardHeader>
                                <MudAvatar Color="@(task.Completed ? Color.Success : Color.Primary)" Variant="Variant.Filled" Size="Size.Medium">
                                    <MudIcon Icon="@(task.Completed ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Task)" />
                                </MudAvatar>
                                <MudText Typo="Typo.h6" Class="task-title">@task.TaskTitle</MudText>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Class="task-description">@task.TaskDescription</MudText>
                                <MudDivider Class="date-divider" />
                                <div class="task-dates">
                                    <MudIcon Icon="@Icons.Material.Filled.Event" Class="icon-dates" />
                                    <span class="date-text">
                                        <strong>Start:</strong> @(task.StartDate == null || task.StartDate == DateTime.MinValue
                            ? "Not Set" : task.StartDate.Value.ToString("g")) <!-- Display Date and Hour -->
                                    </span>
                                    <span class="date-text">
                                        <strong>End:</strong> @(task.EndDate == null || task.EndDate == DateTime.MinValue
                            ? "Not Set" : task.EndDate.Value.ToString("g")) <!-- Display Date and Hour -->
                                    </span>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            }
        }
        else
        {
            <MudText Typo="Typo.body1" Align="Align.Center" Class="no-tasks-message">
                No tasks for the selected date.
            </MudText>
        }
    </MudGrid>
</MudContainer>

<style>
    .calendar-container {
        padding: 24px;
    }

    .calendar-title {
        margin-bottom: 16px;
    }

    .calendar-subtitle {
        color: #888;
        margin-bottom: 24px;
    }

    .calendar-wrapper {
        display: flex;
        justify-content: center;
        margin-bottom: 24px;
    }

    .date-picker {
        max-width: 400px;
    }

    .task-list-title {
        margin-top: 24px;
        margin-bottom: 16px;
    }

    .task-card {
        padding: 16px;
        border-radius: 12px;
        background-color: #f9f9f9;
        transition: box-shadow 0.2s ease-in-out;
    }

        .task-card:hover {
            box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
        }

    .task-title {
        font-weight: 600;
        color: #2c3e50;
        margin-left: 8px;
    }

    .task-description {
        font-size: 0.9rem;
        color: #7f8c8d;
        margin-bottom: 8px;
    }

    .date-divider {
        margin: 8px 0;
    }

    .task-dates {
        display: flex;
        justify-content: space-between;
        font-size: 0.85rem;
        color: #95a5a6;
        margin-top: 8px;
    }

    .icon-dates {
        color: #e67e22;
        margin-right: 8px;
    }

    .no-tasks-message {
        color: #666;
        margin-top: 16px;
    }

    .completed-day {
        background-color: #00C854;
        color: white !important;
        border-radius: 50%;
    }

    .incomplete-day {
        background-color: #594AE2;
        color: white !important;
        border-radius: 50%;
    }
</style>

@code {
    private DateTime? SelectedDate = DateTime.Today;
    private List<Activity> AllTasks = new();
    private List<Activity> TasksForSelectedDate = new();

    protected override async Task OnInitializedAsync()
    {
        // Load all tasks from the database
        AllTasks = await DbContext.Activities
            .Where(t => t.StartDate != null)
            .OrderBy(t => t.StartDate) // Sort by date and time
            .ToListAsync();

        UpdateTasksForSelectedDate();
    }

    private void UpdateTasksForSelectedDate()
    {
        if (SelectedDate.HasValue)
        {
            TasksForSelectedDate = AllTasks
                .Where(t => t.StartDate.HasValue && t.StartDate.Value.Date == SelectedDate.Value.Date)
                .OrderBy(t => t.StartDate) // Sort by date and time
                .ToList();
        }
        else
        {
            TasksForSelectedDate = new List<Activity>();
        }
    }

    private string CheckDate(DateTime date)
    {
        var tasksForDate = AllTasks
            .Where(t => t.StartDate.HasValue && t.StartDate.Value.Date == date.Date)
            .ToList();

        if (!tasksForDate.Any())
            return string.Empty; // No tasks for the date, return no color.

        var allCompleted = tasksForDate.All(t => t.Completed);

        return allCompleted ? "completed-day" : "incomplete-day";
    }

    private void OnDateChanged(DateTime? newDate)
    {
        SelectedDate = newDate;
        UpdateTasksForSelectedDate();
    }
}
