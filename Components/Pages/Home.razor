@page "/"
@inject NavigationManager NavigationManager
@using TaskMaster.Models

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">

    <MudPaper Class="pa-4 mb-4">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-2">Task Management</MudText>
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-4">Manage your tasks efficiently and keep track of completed and upcoming activities.</MudText>
    </MudPaper>

    <MudGrid GutterSize="GutterSize.Small">
        @if (!tasks.Any())
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Align="Align.Center">No tasks found.</MudText>
            </MudItem>
        }
        else
        {
            @foreach (var task in tasks)
            {
                <MudItem xs="12">
                    <MudPaper Class="py-8 px-10" Outlined="false" Elevation="@(!task.Completed ? 4 : 0)">
                        <MudGrid>
                            <MudItem xs="9">
                                <MudText Typo="Typo.h6">@task.Title</MudText>
                                <MudText>@task.Description</MudText>
                                <MudText><strong>Due:</strong> @(task.DueDate?.ToShortDateString() ?? "No Due Date")</MudText>
                            </MudItem>
                            <MudItem xs="3" Class="d-flex flex-column align-end">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="() => EditTask(task.Id)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteTask(task)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="() => MarkAsCompleted(task)" Disabled="@task.Completed" />
                                @if (task.Completed)
                                {
                                    <MudChip T="string" Color="Color.Success" Class="mt-2">Completed</MudChip>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        }
    </MudGrid>

    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.body2" Align="Align.Center">TaskMaster - Your simple and efficient task management solution.</MudText>
    </MudPaper>
</MudContainer>

@code {
    private List<TaskItem> tasks = new();

    protected override void OnInitialized()
    {
        // Sample tasks
        tasks = new List<TaskItem>
        {
            new TaskItem { Id = 1, Title = "Buy Groceries", Description = "Milk, Eggs, Bread", DueDate = DateTime.Now.AddDays(1), Completed = false },
            new TaskItem { Id = 2, Title = "Project Meeting", Description = "Discuss project requirements", DueDate = DateTime.Now.AddDays(3), Completed = false },
            new TaskItem { Id = 3, Title = "Workout", Description = "Go for a run", DueDate = null, Completed = true },
        };
    }

    private void EditTask(int taskId)
    {
        NavigationManager.NavigateTo($"/edit/{taskId}");
    }

    private async void DeleteTask(TaskItem task)
    {
        var parameters = new DialogParameters { ["TaskToDelete"] = task };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<DeleteDialog>("Delete Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is TaskItem taskToDelete)
        {
            tasks.Remove(taskToDelete);
            StateHasChanged();
        }
    }

    private void MarkAsCompleted(TaskItem task)
    {
        task.Completed = true;
        StateHasChanged();
    }

    [Inject] IDialogService DialogService { get; set; }
}